{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/row.js\";\nimport React, { Component } from 'react';\n\nclass Row extends Component {\n  constructor(someProp) {\n    super();\n    this.state = {\n      items: [],\n      rows: [],\n      idata: ['A'],\n      allatt: []\n    };\n    this.rowgen = this.rowgen.bind(this);\n    this.groupgen = this.groupgen.bind(this);\n  } //--------------------------------------------------------RowGenerator starts here\n\n\n  rowgen() {\n    var myrows = [];\n    var temp;\n    const width = 960;\n    const height = 16;\n\n    for (var j = 0; j < this.props.allatt.length; j++) {\n      var flag = false; //console.log(this.props.data[j])\n\n      for (var i = 0; i < this.props.data.length; i++) {\n        if (this.props.allatt[j] == this.props.data[i]) {\n          flag = true;\n        }\n      }\n\n      if (flag == true) {\n        temp = React.createElement(\"rect\", {\n          key: j,\n          fill: \"#c994c7\",\n          x: j * 18,\n          y: 0,\n          width: \"18\",\n          height: \"18\",\n          strokeWidth: \".1\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \" \");\n      } else {\n        temp = React.createElement(\"rect\", {\n          key: j,\n          fill: \"#f0f0f0\",\n          x: j * 18,\n          y: 0,\n          width: \"18\",\n          height: \"18\",\n          strokeWidth: \".1\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, \" \");\n      }\n\n      myrows.push(temp);\n    }\n\n    var myrows2 = React.createElement(\"div\", {\n      className: \"Table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.props.dataset), React.createElement(\"div\", {\n      className: \"Cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, myrows))));\n    this.setState({\n      rows: myrows2\n    });\n  } //--------------------------------------------------------GroupGenerator starts here\n\n\n  groupgen() {\n    var counter = 0; //console.log(\"Hello from groupgen : \",this.props.allatt,\"Data : \",this.props.data,\"idata : \",this.props.idata);\n\n    console.log(\"From groupgen idata is: \", this.props.idata);\n\n    for (var key in this.props.data) {\n      counter = 0;\n\n      for (var j = 0; j < this.props.data[key].length; j++) {\n        for (var i = 0; i < this.props.idata.length; i++) {\n          //console.log(\"Inside j\",this.props.data[key][j],this.props.idata[i]);\n          if (this.props.data[key][j] == this.props.idata[i]) {\n            counter = counter + 1; //console.log(\"Inside if\",this.props.data[key][j],this.props.idata[i],\"counter is: \",counter,\"dataset is : \",key);\n          }\n        }\n      } //console.log('Key is',key);\n      //-------------------------------------------------------------------------If starts here when idata and datasets are matched (If is working for each key iteration)\n\n\n      if (counter == this.props.idata.length) {\n        //console.log(key);\n        //console.log(\"props.lenght matched for : \",key,counter,this.props.idata.length,this.props.data[key])\n        var myrows = [];\n        var temp;\n        const width = 960;\n        const height = 16;\n\n        for (var j = 0; j < this.props.allatt.length; j++) {\n          var flag = false; //console.log(this.props.data[j])\n\n          for (var i = 0; i < this.props.idata.length; i++) {\n            if (this.props.allatt[j] == this.props.idata[i]) {\n              flag = true;\n            }\n          }\n\n          if (flag == true) {\n            temp = React.createElement(\"rect\", {\n              key: j,\n              fill: \"#c994c7\",\n              x: j * 18,\n              y: 0,\n              width: \"18\",\n              height: \"18\",\n              strokeWidth: \".1\",\n              stroke: \"black\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 78\n              },\n              __self: this\n            }, \" \");\n          } else {\n            temp = React.createElement(\"rect\", {\n              key: j,\n              fill: \"#f0f0f0\",\n              x: j * 18,\n              y: 0,\n              width: \"18\",\n              height: \"18\",\n              strokeWidth: \".1\",\n              stroke: \"black\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81\n              },\n              __self: this\n            }, \" \");\n          }\n\n          myrows.push(temp);\n        }\n\n        var myrows2 = React.createElement(\"div\", {\n          className: \"Table\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"Cell\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, key), React.createElement(\"div\", {\n          className: \"Cell\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"svg\", {\n          width: width,\n          height: height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, myrows))));\n        console.log(\"Before setState\", key);\n        this.setState(prevState => ({\n          rows: [...prevState.rows, myrows2]\n        }), () => {\n          console.log(\"Inside Setstate\", key);\n        });\n        console.log(\"After setState\", key);\n      } //-----If ends here\n\n    }\n\n    console.log(\"At the end : \", key); //-----For key ends here\n  }\n\n  componentDidMount() {\n    if (this.props.gg == \"tr\") {\n      this.groupgen();\n    } else {\n      this.rowgen();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.rows);\n  }\n\n}\n\nexport default Row;","map":{"version":3,"sources":["/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/row.js"],"names":["React","Component","Row","constructor","someProp","state","items","rows","idata","allatt","rowgen","bind","groupgen","myrows","temp","width","height","j","props","length","flag","i","data","push","myrows2","dataset","setState","counter","console","log","key","prevState","componentDidMount","gg","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;;AACA,MAAMC,GAAN,SAAkBD,SAAlB,CAA2B;AAC3BE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACA,SAAKC,KAAL,GAAW;AAACC,MAAAA,KAAK,EAAC,EAAP;AAAUC,MAAAA,IAAI,EAAC,EAAf;AAAkBC,MAAAA,KAAK,EAAC,CAAC,GAAD,CAAxB;AAA8BC,MAAAA,MAAM,EAAC;AAArC,KAAX;AACA,SAAKC,MAAL,GAAY,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAZ;AACA,SAAKC,QAAL,GAAc,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAd;AACC,GANsB,CAO3B;;;AACAD,EAAAA,MAAM,GAAE;AACJ,QAAIG,MAAM,GAAC,EAAX;AACA,QAAIC,IAAJ;AACA,UAAMC,KAAK,GAAG,GAAd;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKC,KAAL,CAAWT,MAAX,CAAkBU,MAAhC,EAAuCF,CAAC,EAAxC,EAA2C;AACvC,UAAIG,IAAI,GAAC,KAAT,CADuC,CAEvC;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKH,KAAL,CAAWI,IAAX,CAAgBH,MAA9B,EAAqCE,CAAC,EAAtC,EAAyC;AACrC,YAAG,KAAKH,KAAL,CAAWT,MAAX,CAAkBQ,CAAlB,KAAsB,KAAKC,KAAL,CAAWI,IAAX,CAAgBD,CAAhB,CAAzB,EAA4C;AAAED,UAAAA,IAAI,GAAC,IAAL;AAAY;AAC7D;;AACD,UAAGA,IAAI,IAAE,IAAT,EAAc;AACVN,QAAAA,IAAI,GAAC;AAAM,UAAA,GAAG,EAAEG,CAAX;AAAc,UAAA,IAAI,EAAC,SAAnB;AAA6B,UAAA,CAAC,EAAEA,CAAC,GAAC,EAAlC;AAAsC,UAAA,CAAC,EAAE,CAAzC;AAA4C,UAAA,KAAK,EAAC,IAAlD;AAAuD,UAAA,MAAM,EAAC,IAA9D;AAAmE,UAAA,WAAW,EAAC,IAA/E;AAAoF,UAAA,MAAM,EAAC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AACH,OAFD,MAGI;AACAH,QAAAA,IAAI,GAAC;AAAM,UAAA,GAAG,EAAEG,CAAX;AAAc,UAAA,IAAI,EAAC,SAAnB;AAA6B,UAAA,CAAC,EAAEA,CAAC,GAAC,EAAlC;AAAsC,UAAA,CAAC,EAAE,CAAzC;AAA4C,UAAA,KAAK,EAAC,IAAlD;AAAuD,UAAA,MAAM,EAAC,IAA9D;AAAmE,UAAA,WAAW,EAAC,IAA/E;AAAoF,UAAA,MAAM,EAAC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAL;AACH;;AACDJ,MAAAA,MAAM,CAACU,IAAP,CAAYT,IAAZ;AACH;;AACD,QAAIU,OAAO,GACX;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKN,KAAL,CAAWO,OADZ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,KAAK,EAAEV,KAAZ;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEAH,MAFA,CADA,CAJJ,CADA,CADA;AAeA,SAAKa,QAAL,CAAc;AAACnB,MAAAA,IAAI,EAACiB;AAAN,KAAd;AACH,GA3C0B,CA4C3B;;;AACAZ,EAAAA,QAAQ,GAAE;AACV,QAAIe,OAAO,GAAC,CAAZ,CADU,CAEV;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuC,KAAKX,KAAL,CAAWV,KAAlD;;AACA,SAAI,IAAIsB,GAAR,IAAe,KAAKZ,KAAL,CAAWI,IAA1B,EAA+B;AAC3BK,MAAAA,OAAO,GAAC,CAAR;;AACA,WAAI,IAAIV,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKC,KAAL,CAAWI,IAAX,CAAgBQ,GAAhB,EAAqBX,MAAnC,EAA0CF,CAAC,EAA3C,EAA8C;AAC1C,aAAI,IAAII,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKH,KAAL,CAAWV,KAAX,CAAiBW,MAA/B,EAAsCE,CAAC,EAAvC,EAA0C;AACtC;AACA,cAAG,KAAKH,KAAL,CAAWI,IAAX,CAAgBQ,GAAhB,EAAqBb,CAArB,KAAyB,KAAKC,KAAL,CAAWV,KAAX,CAAiBa,CAAjB,CAA5B,EAAgD;AAC5CM,YAAAA,OAAO,GAACA,OAAO,GAAC,CAAhB,CAD4C,CAE5C;AACF;AACL;AACJ,OAV0B,CAW3B;AACJ;;;AACI,UAAGA,OAAO,IAAE,KAAKT,KAAL,CAAWV,KAAX,CAAiBW,MAA7B,EAAoC;AAChC;AACA;AACQ,YAAIN,MAAM,GAAC,EAAX;AACA,YAAIC,IAAJ;AACA,cAAMC,KAAK,GAAG,GAAd;AACA,cAAMC,MAAM,GAAG,EAAf;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKC,KAAL,CAAWT,MAAX,CAAkBU,MAAhC,EAAuCF,CAAC,EAAxC,EAA2C;AACvC,cAAIG,IAAI,GAAC,KAAT,CADuC,CAEvC;;AACA,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,KAAKH,KAAL,CAAWV,KAAX,CAAiBW,MAA/B,EAAsCE,CAAC,EAAvC,EAA0C;AACtC,gBAAG,KAAKH,KAAL,CAAWT,MAAX,CAAkBQ,CAAlB,KAAsB,KAAKC,KAAL,CAAWV,KAAX,CAAiBa,CAAjB,CAAzB,EAA6C;AAAED,cAAAA,IAAI,GAAC,IAAL;AAAY;AAC9D;;AACD,cAAGA,IAAI,IAAE,IAAT,EAAc;AACVN,YAAAA,IAAI,GAAC;AAAM,cAAA,GAAG,EAAEG,CAAX;AAAc,cAAA,IAAI,EAAC,SAAnB;AAA6B,cAAA,CAAC,EAAEA,CAAC,GAAC,EAAlC;AAAsC,cAAA,CAAC,EAAE,CAAzC;AAA4C,cAAA,KAAK,EAAC,IAAlD;AAAuD,cAAA,MAAM,EAAC,IAA9D;AAAmE,cAAA,WAAW,EAAC,IAA/E;AAAoF,cAAA,MAAM,EAAC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL;AACH,WAFD,MAGI;AACAH,YAAAA,IAAI,GAAC;AAAM,cAAA,GAAG,EAAEG,CAAX;AAAc,cAAA,IAAI,EAAC,SAAnB;AAA6B,cAAA,CAAC,EAAEA,CAAC,GAAC,EAAlC;AAAsC,cAAA,CAAC,EAAE,CAAzC;AAA4C,cAAA,KAAK,EAAC,IAAlD;AAAuD,cAAA,MAAM,EAAC,IAA9D;AAAmE,cAAA,WAAW,EAAC,IAA/E;AAAoF,cAAA,MAAM,EAAC,OAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL;AACH;;AACDJ,UAAAA,MAAM,CAACU,IAAP,CAAYT,IAAZ;AACH;;AACD,YAAIU,OAAO,GACX;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACCM,GADD,CADJ,EAII;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA;AAAK,UAAA,KAAK,EAAEf,KAAZ;AAAmB,UAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEAH,MAFA,CADA,CAJJ,CADA,CADA;AAeAe,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BC,GAA9B;AACA,aAAKJ,QAAL,CAAcK,SAAS,KAAG;AACtBxB,UAAAA,IAAI,EAAC,CAAC,GAAGwB,SAAS,CAACxB,IAAd,EAAmBiB,OAAnB;AADiB,SAAH,CAAvB,EAEG,MAAI;AACHI,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BC,GAA9B;AACH,SAJD;AAKAF,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BC,GAA7B;AACX,OAxD0B,CAyD/B;;AACC;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BC,GAA5B,EA/DU,CAgEV;AACC;;AACDE,EAAAA,iBAAiB,GAAG;AAChB,QAAG,KAAKd,KAAL,CAAWe,EAAX,IAAe,IAAlB,EAAuB;AACnB,WAAKrB,QAAL;AACH,KAFD,MAGI;AACA,WAAKF,MAAL;AACH;AACJ;;AACDwB,EAAAA,MAAM,GAAE;AACR,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK7B,KAAL,CAAWE,IADhB,CADA;AAKC;;AA7H0B;;AA8H3B,eAAeL,GAAf","sourcesContent":["import React,{Component} from 'react';\nclass Row extends Component{\nconstructor(someProp) {\n    super();\n    this.state={items:[],rows:[],idata:['A'],allatt:[]}\n    this.rowgen=this.rowgen.bind(this);  \n    this.groupgen=this.groupgen.bind(this);  \n    }\n//--------------------------------------------------------RowGenerator starts here\nrowgen(){\n    var myrows=[];\n    var temp;\n    const width = 960;\n    const height = 16;\n    for(var j=0;j<this.props.allatt.length;j++){\n        var flag=false;\n        //console.log(this.props.data[j])\n        for(var i=0;i<this.props.data.length;i++){\n            if(this.props.allatt[j]==this.props.data[i]){ flag=true; } \n        }\n        if(flag==true){\n            temp=<rect key={j} fill=\"#c994c7\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n        }\n        else{\n            temp=<rect key={j} fill=\"#f0f0f0\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n        }\n        myrows.push(temp);\n    }\n    var myrows2= \n    <div className=\"Table\">\n    <div className=\"Row\">\n        <div className=\"Cell\">\n        {this.props.dataset}\n        </div>\n        <div className=\"Cell\">\n        <svg width={width} height={height}> \n        {\n        myrows\n        }\n        </svg>\n        </div>\n    </div>\n    </div>  \n    this.setState({rows:myrows2})\n}\n//--------------------------------------------------------GroupGenerator starts here\ngroupgen(){\nvar counter=0;\n//console.log(\"Hello from groupgen : \",this.props.allatt,\"Data : \",this.props.data,\"idata : \",this.props.idata);\nconsole.log(\"From groupgen idata is: \",this.props.idata)\nfor(var key in this.props.data){\n    counter=0;\n    for(var j=0;j<this.props.data[key].length;j++){\n        for(var i=0;i<this.props.idata.length;i++){\n            //console.log(\"Inside j\",this.props.data[key][j],this.props.idata[i]);\n            if(this.props.data[key][j]==this.props.idata[i]){ \n                counter=counter+1;\n                //console.log(\"Inside if\",this.props.data[key][j],this.props.idata[i],\"counter is: \",counter,\"dataset is : \",key);\n             } \n        }    \n    }\n    //console.log('Key is',key);\n//-------------------------------------------------------------------------If starts here when idata and datasets are matched (If is working for each key iteration)\n    if(counter==this.props.idata.length){\n        //console.log(key);\n        //console.log(\"props.lenght matched for : \",key,counter,this.props.idata.length,this.props.data[key])\n                var myrows=[];\n                var temp;\n                const width = 960;\n                const height = 16;\n                for(var j=0;j<this.props.allatt.length;j++){\n                    var flag=false;\n                    //console.log(this.props.data[j])\n                    for(var i=0;i<this.props.idata.length;i++){\n                        if(this.props.allatt[j]==this.props.idata[i]){ flag=true; } \n                    }\n                    if(flag==true){\n                        temp=<rect key={j} fill=\"#c994c7\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n                    }\n                    else{\n                        temp=<rect key={j} fill=\"#f0f0f0\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n                    }\n                    myrows.push(temp);\n                }\n                var myrows2= \n                <div className=\"Table\">\n                <div className=\"Row\">\n                    <div className=\"Cell\">\n                    {key}\n                    </div>\n                    <div className=\"Cell\">\n                    <svg width={width} height={height}> \n                    {\n                    myrows\n                    }\n                    </svg>\n                    </div>\n                </div>\n                </div>\n                console.log(\"Before setState\",key);\n                this.setState(prevState=>({\n                    rows:[...prevState.rows,myrows2]\n                }),()=>{\n                    console.log(\"Inside Setstate\",key)\n                });\n                console.log(\"After setState\",key)\n    }\n//-----If ends here\n}\nconsole.log(\"At the end : \",key)\n//-----For key ends here\n}\ncomponentDidMount() {\n    if(this.props.gg==\"tr\"){\n        this.groupgen();\n    }\n    else{\n        this.rowgen()\n    }\n}\nrender(){\nreturn(\n<div>\n    {this.state.rows}\n</div>\n)\n}}\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}