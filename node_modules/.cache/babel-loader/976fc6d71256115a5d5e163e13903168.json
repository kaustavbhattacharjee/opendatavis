{"ast":null,"code":"/*\nvar datasets_in_dictionary={\n    dataset2: ['A','B','C','D','E'],\n    dataset3: ['A','B','AA','BB','CC','DD','EE'],\n    dataset4: ['A','B','BBB','DDD','C'],\n    }\nvar attributes_from_union=['A','B','C','D','E','AA','BB','CC','DD','EE','BBB','DDD'];\n*/\n//------------------------------------------------------------------------------------------------------ Matrix generator starts here\nexport function test(d) {\n  return d;\n}\nexport function matrixgen(attributes_from_union, datasets_in_dictionary) {\n  console.log(attributes_from_union);\n  var datasets = []; //var size=Object.keys(datasets_in_dictionary).length;\n\n  var matrix = new Array(Object.keys(datasets_in_dictionary).length);\n  var count = 0;\n\n  for (var combinations_key in datasets_in_dictionary) {\n    datasets.push(combinations_key);\n    matrix[count] = new Array(attributes_from_union.length);\n\n    for (var combination_index = 0; combination_index < attributes_from_union.length; combination_index++) {\n      for (var j = 0; j < datasets_in_dictionary[combinations_key].length; j++) {\n        if (attributes_from_union[combination_index] == datasets_in_dictionary[combinations_key][j]) {\n          //console.log(matrix[count]);\n          matrix[count][combination_index] = 1;\n        } else {//matrix[count][combination_index]=0;\n        }\n      }\n    }\n\n    count++;\n  }\n\n  return {\n    'datasets': datasets,\n    'matrix': matrix\n  };\n} //console.log(matrixgen(attributes_from_union,datasets_in_dictionary)['datasets'])\n//console.log(datasets,matrix);\n//------------------------------------------------------------------------------------------------------  Combination generator starts here\n\nexport function combinationgen(arr) {\n  var combdict = [];\n  var arr_length = arr.length;\n\n  for (var len = 1; len <= arr_length; len++) {\n    //-----3 times\n    for (var combination_index = 0; combination_index <= arr_length - len; combination_index++) {\n      //console.log('(len) is: ',len,'(combination_index) is: ',combination_index,' (arr_length) is : ',arr_length)\n\n      /*  (len) is:  1 (combination_index) is:  0  (arr_length) is :  3\n          (len) is:  1 (combination_index) is:  1  (arr_length) is :  3\n          (len) is:  1 (combination_index) is:  2  (arr_length) is :  3\n          --------len has been changed to 2\n          (len) is:  2 (combination_index) is:  0  (arr_length) is :  3\n          (len) is:  2 (combination_index) is:  1  (arr_length) is :  3\n          --------len has been changed to 3\n          (len) is:  3 (combination_index) is:  0  (arr_length) is :  3    */\n      var j = combination_index + len - 1; // ----------------------combination_index is 0,1,2 when len = 1\n      // j is 0 when combination_index is 0;   \n      // j is 1 when combination_index is 1;\n      // j is 2 when combination_index is 2;\n      // ----------------------combination_index is 0,1 when len = 2\n      // j is 1 when combination_index is 0;\n      // j is 2 when combination_index is 1;   \n      // ----------------------combination_index is 0 when len = 3\n\n      var myarr = [];\n\n      for (var k = combination_index; k <= j; k++) {\n        myarr.push(arr[k]); //combdict.push({[len]:arr[k]})\n        //console.log(arr[k]); \n      }\n\n      combdict.push({\n        [len]: myarr\n      }); //console.log(\"\\arr_length\"); \n    }\n  }\n\n  return combdict;\n} //console.log('Combination Generator has generated : ',combinationgen([0,2])) \n//console.log(combinationgen([4,5,0]))\n//------------------------------------------------------------------------------------------------------ Dataset genrator with comobination matrix\n\nexport function combination_matched(matrix, datasets, combination) {\n  var combinations_with_mathced_datasets = [];\n  var len = combination.length - 1;\n\n  for (var combination_index = len; combination_index >= 0; combination_index--) {\n    for (var combinations_key in combination[combination_index]) {\n      var count = 0;\n\n      for (var combinations_dictionary_iterator = 0; combinations_dictionary_iterator < combination[combination_index][combinations_key].length; combinations_dictionary_iterator++) {\n        //console.log(\"----\");  \n        count++;\n\n        for (var fi = 0; fi < datasets.length; fi++) {\n          if (matrix[fi][combination[combination_index][combinations_key][combinations_dictionary_iterator]]) {\n            //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n            if (count == combination[combination_index][combinations_key].length) {\n              combinations_with_mathced_datasets.push({\n                [count]: combination[combination_index][combinations_key],\n                'Dataset': datasets[fi]\n              }); //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return combinations_with_mathced_datasets;\n} //var combination=combinationgen([0,1,2]);\n//var matrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//console.log(combination_matched(matrixgen['matrix'],matrixgen['datasets']),combination);\n//------------------------------------------------------------------------------------------------------ Dataset grouping_based_on_combination starts here\n\nexport function grouping_based_on_combination(combinations, combinationmatched) {\n  //console.log('Combinations : ',combinations);\n  //console.log('Combination matched : ',combinationmatched);\n  var len = combinations.length - 1;\n  var group = 0;\n  var arr_group = [];\n\n  for (var combination_index = len; combination_index >= 0; combination_index--) {\n    var arr = [];\n\n    for (var combinations_key in combinations[combination_index]) {\n      for (var combination_mathced_iterator = 0; combination_mathced_iterator < combinationmatched.length; combination_mathced_iterator++) {\n        for (var key_in_combination_mathced in combinationmatched[combination_mathced_iterator]) {\n          if (JSON.stringify(combinations[combination_index][combinations_key]) == JSON.stringify(combinationmatched[combination_mathced_iterator][key_in_combination_mathced])) {\n            arr.push(combinationmatched[combination_mathced_iterator]['Dataset']);\n          }\n        }\n      }\n\n      arr_group.push({\n        [group]: arr,\n        'dataset': arr,\n        'attributes_index': combinations[combination_index][combinations_key],\n        'occurence': combinations[combination_index][combinations_key].length,\n        'number_of_dataset': arr.length\n      });\n    }\n\n    group++;\n  } //console.log(arr_group)\n\n\n  return arr_group;\n} //var mymatrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//var combinations=combinationgen([0,1,2]);\n//var combinationmatched=combination_matched(mymatrixgen['matrix'],mymatrixgen['datasets'],combinations)\n//console.log(datasetgenwithcombination)\n//var groupeddatasetsfromcombination=grouping_based_on_combination(combinations,combinationmatched);\n//console.log(grouping_based_on_combination(combinations,combinationmatched));\n//------------------------------------------------------------------------------------------------------ To design each dataset based on their groups\n\nexport function print_datasts_with_groups(grouped_datasets_from_combination) {\n  for (var i = 0; i < grouped_datasets_from_combination.length; i++) {\n    //console.log('Group : ',i);\n    for (var j = 0; j < grouped_datasets_from_combination[i]['dataset'].length; j++) {} //console.log('group : ',i,\" dataset: \",grouped_datasets_from_combination[i]['dataset'][j]);\n    //console.log('group : ',i,\" dataset: \",datasets_in_dictionary[grouped_datasets_from_combination[i]['dataset'][j]]);\n    //console.log(grouped_datasets_from_combination[i]['dataset'],' number of combinations matched : ',grouped_datasets_from_combination[i]['occurence'],'number_of_datasets matched',grouped_datasets_from_combination[i]['number_of_dataset']);\n\n  }\n} //print_datasts_with_groups(groupeddatasetsfromcombination);","map":{"version":3,"sources":["/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat3/src/algorithms.js"],"names":["test","d","matrixgen","attributes_from_union","datasets_in_dictionary","console","log","datasets","matrix","Array","Object","keys","length","count","combinations_key","push","combination_index","j","combinationgen","arr","combdict","arr_length","len","myarr","k","combination_matched","combination","combinations_with_mathced_datasets","combinations_dictionary_iterator","fi","grouping_based_on_combination","combinations","combinationmatched","group","arr_group","combination_mathced_iterator","key_in_combination_mathced","JSON","stringify","print_datasts_with_groups","grouped_datasets_from_combination","i"],"mappings":"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","sourcesContent":["/*\nvar datasets_in_dictionary={\n    dataset2: ['A','B','C','D','E'],\n    dataset3: ['A','B','AA','BB','CC','DD','EE'],\n    dataset4: ['A','B','BBB','DDD','C'],\n    }\nvar attributes_from_union=['A','B','C','D','E','AA','BB','CC','DD','EE','BBB','DDD'];\n*/\n//------------------------------------------------------------------------------------------------------ Matrix generator starts here\nexport function test(d){\nreturn d;\n}\nexport function matrixgen(attributes_from_union,datasets_in_dictionary){\n    console.log(attributes_from_union)\nvar datasets=[];\n//var size=Object.keys(datasets_in_dictionary).length;\nvar matrix=new Array(Object.keys(datasets_in_dictionary).length);\nvar count=0;\nfor (var combinations_key in datasets_in_dictionary){\n    datasets.push(combinations_key);\n    matrix[count]=new Array(attributes_from_union.length);\n    for(var combination_index=0;combination_index<attributes_from_union.length;combination_index++){\n        for(var j=0;j<datasets_in_dictionary[combinations_key].length;j++){\n            if(attributes_from_union[combination_index]==datasets_in_dictionary[combinations_key][j]){\n           //console.log(matrix[count]);\n            matrix[count][combination_index]=1;\n        }\n        else{\n            //matrix[count][combination_index]=0;\n        }\n    }\n}\ncount++;\n}\nreturn {'datasets':datasets,'matrix':matrix}\n}\n//console.log(matrixgen(attributes_from_union,datasets_in_dictionary)['datasets'])\n//console.log(datasets,matrix);\n//------------------------------------------------------------------------------------------------------  Combination generator starts here\nexport function combinationgen(arr){\n        var combdict=[];\n        var arr_length=arr.length;\n        for (var len = 1; len <= arr_length; len++) { \n            //-----3 times\n            for (var combination_index = 0; combination_index <= arr_length - len; combination_index++) {\n            //console.log('(len) is: ',len,'(combination_index) is: ',combination_index,' (arr_length) is : ',arr_length)\n            /*  (len) is:  1 (combination_index) is:  0  (arr_length) is :  3\n                (len) is:  1 (combination_index) is:  1  (arr_length) is :  3\n                (len) is:  1 (combination_index) is:  2  (arr_length) is :  3\n                --------len has been changed to 2\n                (len) is:  2 (combination_index) is:  0  (arr_length) is :  3\n                (len) is:  2 (combination_index) is:  1  (arr_length) is :  3\n                --------len has been changed to 3\n                (len) is:  3 (combination_index) is:  0  (arr_length) is :  3    */\n                var j = combination_index + len - 1;\n                // ----------------------combination_index is 0,1,2 when len = 1\n                // j is 0 when combination_index is 0;   \n                // j is 1 when combination_index is 1;\n                // j is 2 when combination_index is 2;\n                // ----------------------combination_index is 0,1 when len = 2\n                // j is 1 when combination_index is 0;\n                // j is 2 when combination_index is 1;   \n                // ----------------------combination_index is 0 when len = 3\n                var myarr=[];\n                for (var k = combination_index; k <= j; k++) {\n                    myarr.push(arr[k]) \n                    //combdict.push({[len]:arr[k]})\n                    //console.log(arr[k]); \n                }\n                combdict.push({[len]:myarr})\n                //console.log(\"\\arr_length\"); \n            } \n        } \n        return combdict;\n    }\n//console.log('Combination Generator has generated : ',combinationgen([0,2])) \n//console.log(combinationgen([4,5,0]))\n//------------------------------------------------------------------------------------------------------ Dataset genrator with comobination matrix\nexport function combination_matched(matrix,datasets,combination){\n    var combinations_with_mathced_datasets=[];\n    var len=combination.length-1;\n    for (var combination_index=len;combination_index>=0;combination_index--){\n            for(var combinations_key in combination[combination_index]){\n                var count=0;\n                for(var combinations_dictionary_iterator=0;combinations_dictionary_iterator<combination[combination_index][combinations_key].length;combinations_dictionary_iterator++){\n                    //console.log(\"----\");  \n                    count++;\n                    for(var fi=0;fi<datasets.length;fi++){\n                    if(matrix[fi][combination[combination_index][combinations_key][combinations_dictionary_iterator]]){\n                        //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n                        if(count==combination[combination_index][combinations_key].length){\n                            combinations_with_mathced_datasets.push({[count]:combination[combination_index][combinations_key],'Dataset':datasets[fi]})\n                            //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n                        }\n                    }   \n                }\n            }\n        }\n    }\nreturn combinations_with_mathced_datasets;      \n}\n//var combination=combinationgen([0,1,2]);\n//var matrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//console.log(combination_matched(matrixgen['matrix'],matrixgen['datasets']),combination);\n//------------------------------------------------------------------------------------------------------ Dataset grouping_based_on_combination starts here\nexport function grouping_based_on_combination(combinations,combinationmatched){\n    //console.log('Combinations : ',combinations);\n    //console.log('Combination matched : ',combinationmatched);\n    var len=combinations.length-1;\n    var group =0;\n    var arr_group=[];\n    for (var combination_index=len;combination_index>=0;combination_index--){\n        var arr=[];\n        for(var combinations_key in combinations[combination_index]){\n            for(var combination_mathced_iterator=0;combination_mathced_iterator<combinationmatched.length;combination_mathced_iterator++){\n                for(var key_in_combination_mathced in combinationmatched[combination_mathced_iterator]){\n                    if(JSON.stringify(combinations[combination_index][combinations_key])== JSON.stringify(combinationmatched[combination_mathced_iterator][key_in_combination_mathced])){\n                        arr.push(combinationmatched[combination_mathced_iterator]['Dataset']);\n                    }\n                }\n            }\n            arr_group.push({[group]:arr,'dataset':arr,'attributes_index':combinations[combination_index][combinations_key],'occurence':combinations[combination_index][combinations_key].length,'number_of_dataset':arr.length})\n            }\n            group++;\n        }\n        //console.log(arr_group)\n    return arr_group;\n    }\n//var mymatrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//var combinations=combinationgen([0,1,2]);\n//var combinationmatched=combination_matched(mymatrixgen['matrix'],mymatrixgen['datasets'],combinations)\n//console.log(datasetgenwithcombination)\n//var groupeddatasetsfromcombination=grouping_based_on_combination(combinations,combinationmatched);\n//console.log(grouping_based_on_combination(combinations,combinationmatched));\n//------------------------------------------------------------------------------------------------------ To design each dataset based on their groups\nexport function print_datasts_with_groups(grouped_datasets_from_combination){\nfor(var i=0;i<grouped_datasets_from_combination.length;i++){\n    //console.log('Group : ',i);\n    for(var j=0;j<grouped_datasets_from_combination[i]['dataset'].length;j++){\n        //console.log('group : ',i,\" dataset: \",grouped_datasets_from_combination[i]['dataset'][j]);\n        //console.log('group : ',i,\" dataset: \",datasets_in_dictionary[grouped_datasets_from_combination[i]['dataset'][j]]);\n    }    \n    //console.log(grouped_datasets_from_combination[i]['dataset'],' number of combinations matched : ',grouped_datasets_from_combination[i]['occurence'],'number_of_datasets matched',grouped_datasets_from_combination[i]['number_of_dataset']);\n}\n}\n//print_datasts_with_groups(groupeddatasetsfromcombination);\n\n"]},"metadata":{},"sourceType":"module"}