{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/row.js\";\nimport React, { Component } from 'react';\n\nclass Row extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      rows: []\n    };\n    this.rowgen = this.rowgen.bind(this);\n  }\n\n  rowgen() {\n    var myrows = [];\n    var temp;\n\n    for (var j = 0; j < this.props.data.length; j++) {\n      flag = false; //console.log(this.props.data[j])\n\n      for (var i = 0; i < this.props.idata.length; i++) {\n        //console.log(\"j is : \",this.props.data[j],\"i is \",this.props.idata[i])\n        if (this.props.data[j] == this.props.idata[i]) {\n          flag = true; //console.log(j,\"From if\",this.props.data[j])\n          //temp=<rect key={index} fill=\"red\" x={index*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n          //console.log(\"Matched :\",this.props.data[j])\n          //myrows.push(temp);\n          //console.log(myrows)\n        } else {//console.log(j,\"From else\",this.props.data[j])\n            //temp=<rect key={index} fill=\"white\" x={index*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n            //myrows.push(temp);\n          }\n      }\n\n      if (flag == true) {\n        temp = React.createElement(\"rect\", {\n          key: j,\n          fill: \"red\",\n          x: j * 18,\n          y: 0,\n          width: \"18\",\n          height: \"18\",\n          strokeWidth: \".1\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, \" \");\n      } else {\n        temp = React.createElement(\"rect\", {\n          key: j,\n          fill: \"white\",\n          x: j * 18,\n          y: 0,\n          width: \"18\",\n          height: \"18\",\n          strokeWidth: \".1\",\n          stroke: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, \" \");\n      }\n\n      myrows.push(temp);\n    }\n\n    this.setState({\n      rows: myrows\n    });\n  }\n\n  render() {\n    const width = 960;\n    const height = 16;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.props.dataset), React.createElement(\"div\", {\n      className: \"Cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.state.rows)))), React.createElement(\"button\", {\n      onClick: this.rowgen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Click\"));\n  }\n\n}\n\nexport default Row;","map":{"version":3,"sources":["/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/row.js"],"names":["React","Component","Row","constructor","props","state","items","rows","rowgen","bind","myrows","temp","j","data","length","flag","i","idata","push","setState","render","width","height","dataset"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nclass Row extends Component{\nconstructor(props) {\n    super(props);\n    this.state={items:[],rows:[]}\n    this.rowgen=this.rowgen.bind(this);  \n    }\nrowgen(){\n    var myrows=[];\n    var temp;\n    for(var j=0;j<this.props.data.length;j++){\n        flag=false;\n        //console.log(this.props.data[j])\n        for(var i=0;i<this.props.idata.length;i++){\n            //console.log(\"j is : \",this.props.data[j],\"i is \",this.props.idata[i])\n            if(this.props.data[j]==this.props.idata[i]){\n                flag=true;\n                //console.log(j,\"From if\",this.props.data[j])\n                //temp=<rect key={index} fill=\"red\" x={index*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n                //console.log(\"Matched :\",this.props.data[j])\n                //myrows.push(temp);\n                //console.log(myrows)\n            }\n            else{\n                //console.log(j,\"From else\",this.props.data[j])\n                //temp=<rect key={index} fill=\"white\" x={index*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n                //myrows.push(temp);\n            }\n        }\n        if(flag==true){\n            temp=<rect key={j} fill=\"red\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n        }\n        else{\n            temp=<rect key={j} fill=\"white\" x={j*18} y={0} width='18' height=\"18\" strokeWidth=\".1\" stroke=\"black\" > </rect>;\n        }\n        myrows.push(temp);\n    }\n    this.setState({rows:myrows})\n}\nrender(){\n    const width = 960;\n    const height = 16;\nreturn(\n<div>\n    <div className=\"Table\">\n        <div className=\"Row\">\n            <div className=\"Cell\">\n            {this.props.dataset}\n            </div>\n            <div className=\"Cell\">\n            <svg width={width} height={height}> \n            {\n            this.state.rows\n            }\n            </svg>\n            </div>\n        </div>\n    </div> \n    <button onClick={this.rowgen}>Click</button>      \n</div>\n)\n}}\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}