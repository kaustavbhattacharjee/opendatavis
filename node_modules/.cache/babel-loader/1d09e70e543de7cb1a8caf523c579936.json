{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/App.js\";\nimport React, { Component } from 'react';\nimport Row from './row';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasets: {\n        dataset2: ['A', 'B', 'C', 'D', 'E'],\n        dataset3: ['A', 'BB', 'CC', 'DD', 'EE'],\n        dataset4: ['AA', 'BBB', 'DDD', 'B', 'C']\n      },\n      allatt: ['A', 'EE', 'B', 'C', 'D', 'E', 'BB', 'CC', 'DD', 'EE', 'BBB', 'DDD'],\n      idata: [],\n      myrect: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.rowgen = this.rowgen.bind(this);\n  }\n\n  //----------------------------------------------------Handle click starts here\n  handleClick(d) {\n    var data = this.state.idata;\n    var mydata = [...data, d];\n    var a; // setstate starts here\n\n    this.setState({\n      idata: mydata\n    }, () => {\n      a = this.rowgen(\"tr\", this.state.idata, this.state.allatt, \"key\", this.state.datasets);\n    }); //console.log(\"From App: handleclick \",a);\n  } //----------------------------------------------------Row generator starts here\n\n\n  rowgen(gg, idata, allatt, datasetname, dataset) {\n    var a = [];\n    a.push(React.createElement(Row, {\n      gg: gg,\n      idata: idata,\n      allatt: allatt,\n      dataset: datasetname,\n      data: dataset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n    this.setState(prevState => ({\n      myrect: [...prevState.myrect, a]\n    }));\n  } //----------------------------------------------------componentDidmount starts here\n\n\n  componentDidMount() {\n    for (var key in this.state.datasets) {\n      this.rowgen(\"\", this.state.idata, this.state.allatt, key, this.state.datasets[key]);\n    }\n  } //----------------------------------------------------render starts here\n\n\n  render() {\n    ++this.mykey;\n    const width = 960;\n    const height = 26; //console.log(this.state.datasets)\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      key: this.mykey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.allatt.map((d, i) => React.createElement(\"text\", {\n      key: i,\n      x: i * 30,\n      y: 20,\n      width: \"38\",\n      height: \"26\",\n      strokeWidth: \".1\",\n      stroke: \"black\",\n      onClick: () => this.handleClick(d),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, d)))), this.state.myrect);\n  } //----------------\n\n\n}\n\nexport default App; //https://www.dummies.com/web-design-development/css3/using-the-div-tag-to-create-tables/","map":{"version":3,"sources":["/Users/mr.mamun/Downloads/attribute-click-event/dist/reorderablemat/src/App.js"],"names":["React","Component","Row","App","constructor","props","state","datasets","dataset2","dataset3","dataset4","allatt","idata","myrect","handleClick","bind","rowgen","d","data","mydata","a","setState","gg","datasetname","dataset","push","prevState","componentDidMount","key","render","mykey","width","height","map","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,WAAP;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACnB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AACAC,QAAAA,QAAQ,EAAE,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CADV;AAEAC,QAAAA,QAAQ,EAAE,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,EAAe,IAAf,EAAoB,IAApB,CAFV;AAGAC,QAAAA,QAAQ,EAAE,CAAC,IAAD,EAAM,KAAN,EAAY,KAAZ,EAAkB,GAAlB,EAAsB,GAAtB;AAHV,OADC;AAMXC,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAK,IAAL,EAAU,GAAV,EAAc,GAAd,EAAkB,GAAlB,EAAsB,GAAtB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,EAA8C,KAA9C,EAAoD,KAApD,CANG;AAOXC,MAAAA,KAAK,EAAC,EAPK;AAQXC,MAAAA,MAAM,EAAC;AARI,KAAb;AAUA,SAAKC,WAAL,GAAiB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAjB;AACA,SAAKC,MAAL,GAAY,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAZ;AACD;;AACD;AACAD,EAAAA,WAAW,CAACG,CAAD,EAAG;AACZ,QAAIC,IAAI,GAAG,KAAKZ,KAAL,CAAWM,KAAtB;AACA,QAAIO,MAAM,GAAC,CAAC,GAAGD,IAAJ,EAASD,CAAT,CAAX;AACA,QAAIG,CAAJ,CAHY,CAId;;AACE,SAAKC,QAAL,CAAc;AAACT,MAAAA,KAAK,EAAEO;AAAR,KAAd,EAA8B,MAAI;AACjCC,MAAAA,CAAC,GAAC,KAAKJ,MAAL,CAAY,IAAZ,EAAiB,KAAKV,KAAL,CAAWM,KAA5B,EAAkC,KAAKN,KAAL,CAAWK,MAA7C,EAAoD,KAApD,EAA0D,KAAKL,KAAL,CAAWC,QAArE,CAAF;AACA,KAFD,EALY,CAQZ;AACD,GA1B2B,CA2B5B;;;AACAS,EAAAA,MAAM,CAACM,EAAD,EAAIV,KAAJ,EAAUD,MAAV,EAAiBY,WAAjB,EAA6BC,OAA7B,EAAqC;AACzC,QAAIJ,CAAC,GAAC,EAAN;AACAA,IAAAA,CAAC,CAACK,IAAF,CAAO,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAEH,EAAT;AAAa,MAAA,KAAK,EAAEV,KAApB;AAA2B,MAAA,MAAM,EAAED,MAAnC;AAA2C,MAAA,OAAO,EAAEY,WAApD;AAAiE,MAAA,IAAI,EAAEC,OAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA,SAAKH,QAAL,CAAcK,SAAS,KAAK;AAC1Bb,MAAAA,MAAM,EAAE,CAAC,GAAGa,SAAS,CAACb,MAAd,EAAsBO,CAAtB;AADkB,KAAL,CAAvB;AAGD,GAlC2B,CAmC5B;;;AACAO,EAAAA,iBAAiB,GAAE;AACjB,SAAI,IAAIC,GAAR,IAAe,KAAKtB,KAAL,CAAWC,QAA1B,EAAmC;AACjC,WAAKS,MAAL,CAAY,EAAZ,EAAe,KAAKV,KAAL,CAAWM,KAA1B,EAAgC,KAAKN,KAAL,CAAWK,MAA3C,EAAkDiB,GAAlD,EAAsD,KAAKtB,KAAL,CAAWC,QAAX,CAAoBqB,GAApB,CAAtD;AAAmF;AACtF,GAvC2B,CAwC5B;;;AACEC,EAAAA,MAAM,GAAG;AACP,MAAE,KAAKC,KAAP;AACA,UAAMC,KAAK,GAAG,GAAd;AACA,UAAMC,MAAM,GAAG,EAAf,CAHO,CAIP;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAE,KAAKF,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,KAAK,EAAEC,KAAZ;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAK1B,KAAL,CAAWK,MAAX,CAAkBsB,GAAlB,CAAsB,CAAChB,CAAD,EAAIiB,CAAJ,KAAW;AAAM,MAAA,GAAG,EAAEA,CAAX;AAAc,MAAA,CAAC,EAAEA,CAAC,GAAC,EAAnB;AAAuB,MAAA,CAAC,EAAE,EAA1B;AAA8B,MAAA,KAAK,EAAC,IAApC;AAAyC,MAAA,MAAM,EAAC,IAAhD;AAAqD,MAAA,WAAW,EAAC,IAAjE;AAAsE,MAAA,MAAM,EAAC,OAA7E;AAAqF,MAAA,OAAO,EAAE,MAAM,KAAKpB,WAAL,CAAiBG,CAAjB,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0HA,CAA1H,CAAjC,CAFF,CADA,CADF,EAQG,KAAKX,KAAL,CAAWO,MARd,CADF;AAYD,GA1DyB,CA2D5B;;;AA3D4B;;AA6D5B,eAAeV,GAAf,C,CAOA","sourcesContent":["import React, { Component } from 'react';\nimport Row from './row';\nimport './App.css';\nclass App extends Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    datasets: {\n              dataset2: ['A','B','C','D','E'],\n              dataset3: ['A','BB','CC','DD','EE'],\n              dataset4: ['AA','BBB','DDD','B','C'],\n              },\n    allatt: ['A','EE','B','C','D','E','BB','CC','DD','EE','BBB','DDD'],\n    idata:[],\n    myrect:[]\n  }\n  this.handleClick=this.handleClick.bind(this);\n  this.rowgen=this.rowgen.bind(this);\n};\n//----------------------------------------------------Handle click starts here\nhandleClick(d){\n  var data = this.state.idata;\n  var mydata=[...data,d]\n  var a;\n// setstate starts here\n  this.setState({idata: mydata},()=>{\n   a=this.rowgen(\"tr\",this.state.idata,this.state.allatt,\"key\",this.state.datasets);\n  });\n  //console.log(\"From App: handleclick \",a);\n}\n//----------------------------------------------------Row generator starts here\nrowgen(gg,idata,allatt,datasetname,dataset){\n  var a=[];\n  a.push(<Row gg={gg} idata={idata} allatt={allatt} dataset={datasetname} data={dataset}/>)\n  this.setState(prevState => ({\n    myrect: [...prevState.myrect, a] \n  }));\n}\n//----------------------------------------------------componentDidmount starts here\ncomponentDidMount(){\n  for(var key in this.state.datasets){\n    this.rowgen(\"\",this.state.idata,this.state.allatt,key,this.state.datasets[key]);  }\n}\n//----------------------------------------------------render starts here\n  render() {\n    ++this.mykey;\n    const width = 960;\n    const height = 26;\n    //console.log(this.state.datasets)\n    return (\n      <div className=\"App\" key={this.mykey}>\n        <div className=\"Cell\">\n        <svg width={width} height={height}>  \n        {\n          this.state.allatt.map((d, i) => (<text key={i} x={i*30} y={20} width='38' height=\"26\" strokeWidth=\".1\" stroke=\"black\" onClick={() => this.handleClick(d)}>{d}</text>))\n        }\n        </svg>\n        </div>\n        {this.state.myrect}\n      </div>\n    );\n  }\n//----------------\n}\nexport default App;\n\n\n\n\n\n\n//https://www.dummies.com/web-design-development/css3/using-the-div-tag-to-create-tables/\n"]},"metadata":{},"sourceType":"module"}