{"ast":null,"code":"/*\nvar datasets_in_dictionary={\n    dataset2: ['A','B','C','D','E'],\n    dataset3: ['A','B','AA','BB','CC','DD','EE'],\n    dataset4: ['A','B','BBB','DDD','C'],\n    }\nvar attributes_from_union=['A','B','C','D','E','AA','BB','CC','DD','EE','BBB','DDD'];\n*/\n//------------------------------------------------------------------------------------------------------ Matrix generator starts here\nexport function test(d) {\n  return d;\n}\nexport function matrixgen(attributes_from_union, datasets_in_dictionary) {\n  //console.log(datasets_in_dictionary)\n  var datasets = []; //var size=Object.keys(datasets_in_dictionary).length;\n\n  var matrix = new Array(Object.keys(datasets_in_dictionary).length);\n  var count = 0;\n\n  for (var combinations_key in datasets_in_dictionary) {\n    datasets.push(combinations_key);\n    matrix[count] = new Array(attributes_from_union.length);\n\n    for (var combination_index = 0; combination_index < attributes_from_union.length; combination_index++) {\n      for (var j = 0; j < datasets_in_dictionary[combinations_key].length; j++) {\n        if (attributes_from_union[combination_index] == datasets_in_dictionary[combinations_key][j]) {\n          //console.log(matrix[count]);\n          matrix[count][combination_index] = 1;\n        } else {\n          if (!matrix[count][combination_index] == 1) {\n            matrix[count][combination_index] = 0;\n          }\n        }\n      }\n    }\n\n    count++;\n  }\n\n  return {\n    'datasets': datasets,\n    'matrix': matrix\n  };\n} //console.log(matrixgen(attributes_from_union,datasets_in_dictionary)['datasets'])\n//console.log(datasets,matrix);\n//------------------------------------------------------------------------------------------------------  Combination generator starts here\n\nexport function combinationgen(array) {\n  var combdict = [];\n\n  function fork(i, t) {\n    if (i === array.length) {\n      result.push(t);\n      return;\n    }\n\n    fork(i + 1, t.concat([array[i]]));\n    fork(i + 1, t);\n  }\n\n  var result = [];\n  fork(0, []);\n\n  for (var i = 0; i < result.length; i++) {\n    if (result[i].length > 0) {\n      combdict.push({\n        [result[i].length]: result[i]\n      });\n    }\n  }\n\n  return combdict;\n} //console.log('Combination Generator has generated : ',combinationgen([0,2])) \n//console.log(combinationgen([4,5,0]))\n//------------------------------------------------------------------------------------------------------ Comobination matched starts here\n\nexport function combination_matched(matrix, datasets, combination) {\n  var combinations_with_mathced_datasets = [];\n  var len = combination.length - 1;\n\n  for (var combination_index = len; combination_index >= 0; combination_index--) {\n    for (var combinations_key in combination[combination_index]) {\n      var count = 0;\n\n      for (var combinations_dictionary_iterator = 0; combinations_dictionary_iterator < combination[combination_index][combinations_key].length; combinations_dictionary_iterator++) {\n        //console.log(\"----\");  \n        count++;\n\n        for (var fi = 0; fi < datasets.length; fi++) {\n          if (matrix[fi][combination[combination_index][combinations_key][combinations_dictionary_iterator]]) {\n            //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n            if (count == combination[combination_index][combinations_key].length) {\n              combinations_with_mathced_datasets.push({\n                [count]: combination[combination_index][combinations_key],\n                'Dataset': datasets[fi]\n              }); //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return combinations_with_mathced_datasets;\n} //var combination=combinationgen([0,1,2]);\n//var matrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//console.log(combination_matched(matrixgen['matrix'],matrixgen['datasets']),combination);\n//------------------------------------------------------------------------------------------------------ Dataset grouping_based_on_combination starts here\n\nexport function grouping_based_on_combination(combinations, combinationmatched) {\n  //console.log('Combinations : ',combinations);\n  //console.log('Combination matched : ',combinationmatched);\n  var len = combinations.length - 1;\n  var group = 0;\n  var arr_group = [];\n\n  for (var combination_index = len; combination_index >= 0; combination_index--) {\n    var arr = [];\n\n    for (var combinations_key in combinations[combination_index]) {\n      for (var combination_mathced_iterator = 0; combination_mathced_iterator < combinationmatched.length; combination_mathced_iterator++) {\n        for (var key_in_combination_mathced in combinationmatched[combination_mathced_iterator]) {\n          if (JSON.stringify(combinations[combination_index][combinations_key]) == JSON.stringify(combinationmatched[combination_mathced_iterator][key_in_combination_mathced])) {\n            arr.push(combinationmatched[combination_mathced_iterator]['Dataset']);\n          }\n        }\n      }\n\n      arr_group.push({\n        [group]: arr,\n        'dataset': arr,\n        'attributes_index': combinations[combination_index][combinations_key],\n        'occurence': combinations[combination_index][combinations_key].length,\n        'number_of_dataset': arr.length\n      });\n    }\n\n    group++;\n  } //console.log(arr_group)\n\n\n  return arr_group;\n} //------------------------------------------------------------------------------------------------------ Second Matrix generator starts here\n\nexport function second_matrix_with_datasets(datasets, matrix) {\n  // The parameters are dataset array and matrix array.\n  var newMatrix = [datasets, matrix];\n\n  for (var i = 0; i < matrix.length; i++) {\n    for (var j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] == 1) {\n        newMatrix[1][i][j] = j;\n      } else {\n        newMatrix[1][i][j] = 'n';\n      }\n    }\n  }\n\n  return newMatrix;\n} //------------------------------------------------------------------------------------------------------ Function to check if an array contains another array\n\nfunction arrayContainsArray(superset, subset) {\n  if (0 === subset.length) {\n    return false;\n  }\n\n  return subset.every(function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n} //------------------------------------------------------------------------------------------------------ Second combinationMatched starts here\n\n\nexport function dataset_grouper(secondMatrix, combinations) {\n  // secondMatrix[1] has the arrays with combinations set to their respective index\n  var return_Array = new Array(combinations.length);\n  var count = 0;\n\n  for (var i = 0; i < combinations.length; i++) {\n    var arr = [[], []];\n    arr[0] = combinations[i]; //console.log(combinations[i]);\n\n    for (var j = 0; j < secondMatrix[1].length; j++) {\n      if (arrayContainsArray(secondMatrix[1][j], combinations[i])) {\n        arr[1].push(secondMatrix[0][j]); //console.log(combinations[i],secondMatrix[0][j])\n      }\n    }\n\n    return_Array[count] = arr;\n    count++;\n  }\n\n  return subsetRemover(return_Array);\n} //------------------------------------------------------------------------------------------------------ subsetRemover\n\nfunction subsetRemover(grouped_datasets) {\n  var subsetRemovedArray = grouped_datasets;\n  var return_Array = [];\n  var len = subsetRemovedArray.length;\n\n  for (var i = 0; i < len; i++) {\n    for (var j = i + 1; j < len; j++) {\n      if (typeof subsetRemovedArray[j] !== 'undefined' & typeof subsetRemovedArray[i] !== 'undefined') {\n        if (JSON.stringify(subsetRemovedArray[i][1]) === JSON.stringify(subsetRemovedArray[j][1])) {\n          delete subsetRemovedArray[j];\n        } else {}\n      }\n    }\n  }\n\n  for (var i = 0; i < subsetRemovedArray.length; i++) {\n    if (typeof subsetRemovedArray[i] !== 'undefined') {\n      if (subsetRemovedArray[i].length > 0) {\n        return_Array.push(subsetRemovedArray[i]);\n      }\n    }\n  }\n\n  return return_Array;\n}","map":{"version":3,"sources":["/Users/mr.mamun/Desktop/Programs/18 ReactApps/reorderablemat3/src/algorithms.js"],"names":["test","d","matrixgen","attributes_from_union","datasets_in_dictionary","datasets","matrix","Array","Object","keys","length","count","combinations_key","push","combination_index","j","combinationgen","array","combdict","fork","i","t","result","concat","combination_matched","combination","combinations_with_mathced_datasets","len","combinations_dictionary_iterator","fi","grouping_based_on_combination","combinations","combinationmatched","group","arr_group","arr","combination_mathced_iterator","key_in_combination_mathced","JSON","stringify","second_matrix_with_datasets","newMatrix","arrayContainsArray","superset","subset","every","value","indexOf","dataset_grouper","secondMatrix","return_Array","subsetRemover","grouped_datasets","subsetRemovedArray"],"mappings":"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","sourcesContent":["/*\nvar datasets_in_dictionary={\n    dataset2: ['A','B','C','D','E'],\n    dataset3: ['A','B','AA','BB','CC','DD','EE'],\n    dataset4: ['A','B','BBB','DDD','C'],\n    }\nvar attributes_from_union=['A','B','C','D','E','AA','BB','CC','DD','EE','BBB','DDD'];\n*/\n//------------------------------------------------------------------------------------------------------ Matrix generator starts here\nexport function test(d){\nreturn d;\n}\nexport function matrixgen(attributes_from_union,datasets_in_dictionary){\n    //console.log(datasets_in_dictionary)\nvar datasets=[];\n//var size=Object.keys(datasets_in_dictionary).length;\nvar matrix=new Array(Object.keys(datasets_in_dictionary).length);\nvar count=0;\nfor (var combinations_key in datasets_in_dictionary){\n    datasets.push(combinations_key);\n    matrix[count]=new Array(attributes_from_union.length);\n    for(var combination_index=0;combination_index<attributes_from_union.length;combination_index++){\n        for(var j=0;j<datasets_in_dictionary[combinations_key].length;j++){\n            if(attributes_from_union[combination_index]==datasets_in_dictionary[combinations_key][j]){\n           //console.log(matrix[count]);\n            matrix[count][combination_index]=1;\n        }\n        else{\n            if(!matrix[count][combination_index]==1){\n                matrix[count][combination_index]=0;\n            }\n        }\n    }\n}\ncount++;\n}\nreturn {'datasets':datasets,'matrix':matrix}\n}\n//console.log(matrixgen(attributes_from_union,datasets_in_dictionary)['datasets'])\n//console.log(datasets,matrix);\n//------------------------------------------------------------------------------------------------------  Combination generator starts here\nexport function combinationgen(array){\n   var combdict=[];\n    function fork(i, t) {\n        if (i === array.length) {\n            result.push(t);\n            return;\n        }\n        fork(i + 1, t.concat([array[i]]));\n        fork(i + 1, t);\n    }\n    var result = [];\n    fork(0, []);\n    for(var i=0;i<result.length;i++){\n        if(result[i].length>0){\n            combdict.push({[result[i].length]:result[i]})\n        }\n    }\n    return combdict;\n    }\n//console.log('Combination Generator has generated : ',combinationgen([0,2])) \n//console.log(combinationgen([4,5,0]))\n//------------------------------------------------------------------------------------------------------ Comobination matched starts here\nexport function combination_matched(matrix,datasets,combination){\n    var combinations_with_mathced_datasets=[];\n    var len=combination.length-1;\n    for (var combination_index=len;combination_index>=0;combination_index--){\n            for(var combinations_key in combination[combination_index]){\n                var count=0;\n                for(var combinations_dictionary_iterator=0;combinations_dictionary_iterator<combination[combination_index][combinations_key].length;combinations_dictionary_iterator++){\n                    //console.log(\"----\");  \n                    count++;\n                    for(var fi=0;fi<datasets.length;fi++){\n                    if(matrix[fi][combination[combination_index][combinations_key][combinations_dictionary_iterator]]){\n                        //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n                        if(count==combination[combination_index][combinations_key].length){\n                            combinations_with_mathced_datasets.push({[count]:combination[combination_index][combinations_key],'Dataset':datasets[fi]})\n                            //console.log(combination[combination_index][combinations_key],datasets[fi],combination[combination_index][combinations_key].length,count);\n                        }\n                    }   \n                }\n            }\n        }\n    }\nreturn combinations_with_mathced_datasets;      \n}\n//var combination=combinationgen([0,1,2]);\n//var matrixgen=matrixgen(attributes_from_union,datasets_in_dictionary);\n//console.log(combination_matched(matrixgen['matrix'],matrixgen['datasets']),combination);\n//------------------------------------------------------------------------------------------------------ Dataset grouping_based_on_combination starts here\nexport function grouping_based_on_combination(combinations,combinationmatched){\n    //console.log('Combinations : ',combinations);\n    //console.log('Combination matched : ',combinationmatched);\n    var len=combinations.length-1;\n    var group =0;\n    var arr_group=[];\n    for (var combination_index=len;combination_index>=0;combination_index--){\n        var arr=[];\n        for(var combinations_key in combinations[combination_index]){\n            for(var combination_mathced_iterator=0;combination_mathced_iterator<combinationmatched.length;combination_mathced_iterator++){\n                for(var key_in_combination_mathced in combinationmatched[combination_mathced_iterator]){\n                    if(JSON.stringify(combinations[combination_index][combinations_key])== JSON.stringify(combinationmatched[combination_mathced_iterator][key_in_combination_mathced])){\n                        arr.push(combinationmatched[combination_mathced_iterator]['Dataset']);\n                    }\n                }\n            }\n            arr_group.push({[group]:arr,'dataset':arr,'attributes_index':combinations[combination_index][combinations_key],'occurence':combinations[combination_index][combinations_key].length,'number_of_dataset':arr.length})\n            }\n            group++;\n        }\n        //console.log(arr_group)\n    return arr_group;\n    }\n//------------------------------------------------------------------------------------------------------ Second Matrix generator starts here\nexport function second_matrix_with_datasets(datasets,matrix){\n    // The parameters are dataset array and matrix array.\n    var newMatrix=[datasets,matrix];\n    for(var i=0;i<matrix.length;i++){\n        for(var j=0;j<matrix[i].length;j++){\n            if(matrix[i][j]==1){\n                newMatrix[1][i][j]=j;\n            }\n            else{\n                newMatrix[1][i][j]='n';\n            }\n        }\n    }\nreturn newMatrix;\n}\n//------------------------------------------------------------------------------------------------------ Function to check if an array contains another array\nfunction arrayContainsArray (superset, subset) {\n    if (0 === subset.length) {\n      return false;\n    }\n    return subset.every(function (value) {\n      return (superset.indexOf(value) >= 0);\n    });\n  }\n\n//------------------------------------------------------------------------------------------------------ Second combinationMatched starts here\nexport function dataset_grouper(secondMatrix,combinations){\n    // secondMatrix[1] has the arrays with combinations set to their respective index\n    var return_Array=new Array(combinations.length);\n    var count=0;\n    for(var i=0; i<combinations.length;i++){\n        var arr=[[],[]];\n        arr[0]=combinations[i]\n        //console.log(combinations[i]);\n        for(var j=0;j<secondMatrix[1].length;j++){\n            if(arrayContainsArray(secondMatrix[1][j],combinations[i])){\n               arr[1].push(secondMatrix[0][j]); \n                //console.log(combinations[i],secondMatrix[0][j])\n            }\n        }\n        return_Array[count]=arr;\n        count++;\n    }\n   return subsetRemover(return_Array);\n}\n//------------------------------------------------------------------------------------------------------ subsetRemover\nfunction subsetRemover(grouped_datasets){\n    var subsetRemovedArray = grouped_datasets;\n    var return_Array=[];\n    var len=subsetRemovedArray.length;\n    for(var i=0;i<len;i++){\n        for(var j=i+1;j<len;j++){\n            if(typeof subsetRemovedArray[j] !== 'undefined' & typeof subsetRemovedArray[i] !== 'undefined'){\n            if((JSON.stringify(subsetRemovedArray[i][1])) === JSON.stringify(subsetRemovedArray[j][1])){\n                delete subsetRemovedArray[j];\n            }\n        else{\n            \n            }\n        }\n    } \n    }\n    for(var i=0;i<subsetRemovedArray.length;i++){\n        if(typeof subsetRemovedArray[i] !== 'undefined'){\n            if(subsetRemovedArray[i].length>0){\n                return_Array.push(subsetRemovedArray[i]);\n            }\n        }\n}\nreturn return_Array;\n}"]},"metadata":{},"sourceType":"module"}